---
import type { HTMLAttributes } from "astro/types"
import { Icon } from "astro-icon/components"
import { cn } from "@shared/cn"

type Props = HTMLAttributes<"pre">
const props = Astro.props

const buttonBaseStyle = cn(
    "w-6 h-6 items-center justify-center transition-all rounded-md hover:border focus:outline-none",
)
---

<copy-button-container class="mt-1 flex flex-row">
    <pre {...props} class={cn(props.class, "flex-grow")}><slot /></pre>

    <div>
        <!-- NOTE: if you change date-type value remember to change CopyButtonContainer as well -->
        <button data-type="btn-copy" class={cn(buttonBaseStyle, "inline-flex")}>
            <span class="sr-only">Copy</span>
            <Icon name="copy" />
        </button>

        <!-- NOTE: if you change date-type value remember to change CopyButtonContainer as well -->
        <button
            data-type="btn-copied"
            class={cn(buttonBaseStyle, "hidden border-green-600")}
            disabled
        >
            <span class="sr-only">Copied</span>
            <Icon name="check" class="text-green-600" />
        </button>
    </div>
</copy-button-container>

<script>
    const copyToClipboard = async (text: string) => {
        try {
            await navigator.clipboard.writeText(text)
        } catch (error) {
            console.error("Cannot write to clipboard", error)
        }
    }

    class CopyButtonContainer extends HTMLElement {
        constructor() {
            super()

            const text = this.querySelector("code")?.innerText || ""
            const copyButton: HTMLButtonElement | null = this.querySelector("[data-type=btn-copy]")
            const copiedButton: HTMLButtonElement | null =
                this.querySelector("[data-type=btn-copied]")

            if (!copyButton || !copiedButton) {
                console.error("Cannot find copy buttons")
                return
            }

            copyButton.addEventListener("click", async () => {
                await copyToClipboard(text)

                copyButton.style.display = "none"
                copiedButton.style.display = "inline-flex"

                // Reset state after 2s after copying text
                setTimeout(() => {
                    copiedButton.style.display = "none"
                    copyButton.style.display = "inline-flex"
                }, 2000)
            })
        }
    }

    customElements.define("copy-button-container", CopyButtonContainer)
</script>
